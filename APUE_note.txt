信号：
======================
kill(2)命令将信号发送给另一个进程或者进程组，但是也有限制，接收西信号进程和发送信号进程所有者必须相同，或者发送信号的所有者必须是超级用户。
SIGKILL和SIGSTOP不能忽略，也不能捕捉，他们向超级用户提供了使进程终止和停止的可靠方法。
SIG_IGN:signal ignore 忽略
SIG_DFL:signal default 默认动作
signal handler 信号处理程序
signal-catching function 信号捕捉函数
exec函数将原先设置要捕捉的信号，都更改为所在进程默认的设置，其他信号不变。
（因为当执行一个新程序后，信号不捕捉函数的地址，在新程序当中可能是无意义的）
======================
名词解释：
USU：usually 通常
emulator trap 仿真器陷入
profiling interval timer 梗概统计间隔计时器
segmentation violation 段违例
signal set 信号集
priority band 优先级段
======================
编程技巧：
  1 #include <stdio.h>
  2 
  3 #define result(set) (*(set) = 0, 1)
  4 
  5 int main(int argc, char *argv[])
  6 {
  7         int set;
  8         fprintf(stdout, "result:%d\n", result(&set));
  9         return 0;
 10 }
可以用逗号表达式，构造宏定义函数的方法，如第3行所示，改函数的返回值将等于1,如果不加逗号后边的部分，则返回值，等于该赋值语句的值。
======================
sigpending()函数的用法：
int sigpending(sigset_t *set);
他是用来返回系统当前被堵塞的信号集，即系统当前有那些信号处于被阻塞的状态。
即当用sigprocmask设置了系统的信号屏蔽码，而且设置后，有信号发生，则调用函数时，该信号的对应位会保存在set结构体中。
而当设置了该信号的屏蔽码，但未产生该信号时，调用sigpending函数时，表示信号集的结构体的信号该位置不被设置。
另外，此外，需要用到int sigismember(const sigset_t *set, int signum)函数，检测结构体的宏信号定义，以检查设置的结果。
在github库的
git@github.com:dear531/unix_network_programming_note.git
有相应的
add_del_mask.c
当时按照自己思路写成的程序代码，可供参考。
按照apue227页的程序思路写成的。
此函数取得信号屏蔽码屏蔽当前未决的信号集，然后由sigismember函数检查其中是否有我们想要的。
======================
在信号设置函数中，可以设置函数的处理行为，可在自定义的信号处理函数中，重新设置信号处理函数为默认方式。
 18 void sig_quit(int sinnum)
 19 {
 20         /* sigquit function */
 21         fprintf(stdout, "catch SIGQUIT\n");
 22         if (signal(SIGQUIT, SIG_DFL) == SIG_ERR)
 23                 sys_err("set signal sinquit to SIN_DFL\n");
 24         return;
 25 }
======================
sa_mask指定信号处理函数执行的过程中应被阻塞的信号。另外，除了SA_NODEFER标志被指定外，触发信号处理函数执行的那个信号也会被阻塞。
//此说法需要验证，希望尽快出结论
======================
注意这个两个函数的使用，容易在设置屏蔽码的时候混淆：
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
当用sigemptyset函数设置set结构体能信号集全空时，如果用这个全空的信号集用作系统的屏蔽码，那么就意味着一切信号均不屏蔽。相反，如果全设置，即为均进行屏蔽。
注意设置屏蔽码信号集与信号本身的关系，另，上述说的全部信号指有效信号，即不包括无法屏蔽和忽略的信号。kill和stop
======================
sleep函数如果被中断，则无论还有剩下多少时间，均不再继续执行，被信号打断，返回程序，执行sleep以下的代码。此种情况必须在信号的函数为自定义函数时实现，因为系统默认对信号处理的方式为杀死进程，无法看到sleep函数被信号打断的效果。
unsigned int sleep(unsigned int seconds);
======================
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
struct sigaction {
    void (*sa_handler)(int);
    void (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t sa_mask;
    int sa_flags;
    void (*sa_restorer)(void);
}
sa_flags指定一系列用于修改信号处理过程行为的标志，由下面的0个或多个标志通过or运算组合而成：
SA_NOCLDSTOP //此标志为on时，假如signum的值是SIGCHLD，则在子进程停止或恢复执行时不会传信号给调用本系统调用的进程。
注意，此宏是表示子进程暂停和恢复执行状态，不是表示子进程退出，切莫混淆。
切记，要设定该标志位，同时设定处理SIGCHLD，才有意义。
sigaction(SIGCHLD, &act, &oact)

SA_NOCLDWAIT //此标志为on时，当调用此系统调用的进程之子进程终止时，系统不会建立zombie进程。
注：以上验证过，设置该标志的宏且设置SIGCHLD信号处理之后，子进程直接用户空间程序和内核状态都退出，即不产生僵死进程。
SA_RESETHAND //此标志为on时，信号处理函数接收到信号后，会先将对信号处理的方式设为预设方式，而且当函数处理该信号时，后来发生的信号将不会被阻塞。
注：此状态的意思，可能是只让信号处理函数，即说明当中的预设方式。只捕捉并执行信号处理一次，之后恢复系统默认的处理状态。
百度百科中找到这样的解释：
SA_RESETHAND：当调用信号处理函数时，将信号的处理函数重置为缺省值SIG_DFL
可以确定，是这样的方式。
SA_ONSTACK //如果利用sigaltstack()建立信号专用堆栈，则此标志会把所有信号送往该堆栈。
注：该指针只系统内核的堆栈大不够用时才进行重新设置，一般情况下不用。
SA_NODEFER //当此标志为on时，在信号处理函数处置信号的时段中，核心程序不会把这个间隙中产生的信号阻塞。
注：标志位只对sigaction函数设置的捕获信号有意义，所谓阻塞，即相对捕获信号而言，在调用信号处理函数时，就设置相对其在信号处理函数期间阻塞，相反，不设置则不阻塞。现象是这样的，如果设置了该标志位，即设置阻塞 flags = 0,则在信号函数运行期间，如果有该信号从内核发来，则信号函数不被打断，直到执行完退回到出为止；如果设置flags = SA_NODEFER，则不阻塞，有信号函数设置处理的信号，那么信号处理函数，依旧被打断，去处理新到来的信号，相当于在主程序当中被打断是一样的。特别要注意区分的是SA_NODEFER是不推迟的意思，即不阻塞。
另外强调一点，这个阻塞和不阻塞的处理过程，跟信号处理函数运行期间所设置的信号屏蔽码，一毛钱关系都没有，无论信号屏蔽码如何设置，信号屏蔽码设置的屏蔽码都将执行自己的规则。
有一点需要特别注意，即信号函数的信号屏蔽码和信号函数本身堵塞的设置信号可能出现重合的现象，信号函数屏蔽码对信号函数要处理的信号也进行了设置，这增加了耦合度，所以，推荐，信号屏蔽码内不要包含信号处理函数要处理的信号。即不要在信号处理函数的信号屏蔽码中屏蔽信号处理函数要处理的信号，让信号函数自由发挥，阻塞还是不阻塞。
切记，信号处理函数的运行规则，他是在信号处理函数执行的过程中，新的信号处理函数将原有信号函数打断，并将现有信号处理函数压栈，并开始执行新的信号处理函数，当新信号处理完成时，还会回到先前压栈的信号函数执行处，继续执行返回一层的信号处理函数当中，继续执行，如同函数的递归过程一样，无论被打断多少层，均按照此规则执行，真是个美妙的设计。
详见git@github.com:dear531/unix_network_programming_note.git中signal_execute_multicall_interrup_stack_show.c源代码实现过程。
======================
一个函数的函数名，即为这个函数的地址指针。
如：
  5 void sig_quit(int signum)
  6 {
 ......
 14 }

 15 typedef void (*sighandler_t)(int);
 16 sighandler_t signal_restart(int signum, sighandler_t func)
 17 {
 ......

 43 }

则函数调用时的情形：

47         if (signal_restart(SIGQUIT, sig_quit) == SIG_ERR)
	/* handle error */

======================
