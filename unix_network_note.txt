volume 1 (卷一)
===============================
setsockopt和getsockopt对ip层和对socket层宏的选项设置：man 7 ip、man 7 socket
epoll函数相关流程设置：man 7 epoll
ioctl函数相关对宏设置：man 7 netdevice
man 2 socket函数时，协议宏后其对应的man 7 对应选项提供了很多sokcet的选项设置
===============================
对不明白的程序代码进行了这样的标注，以后有机会研究的时候好找，做标记
/* understood */
===============================
tcp protocol prot 13 get time service
$ nc -nvv 129.6.15.28 13
Connection to 129.6.15.28 13 port [tcp/*] succeeded!

56715 14-02-27 08:08:02 00 0 0 842.1 UTC(NIST) * 
===============================
函数及其返回值：
/***************/
bzero() 与 memset()区别：memset容易将后两个参数设置位置颠倒，并且编译器检查不出这个数据类型有混淆，因为这两个参数的数据类型一致。
/***************/
int inet_pton(int af, const char *src, void *dst);
RETURN VALUE
       inet_pton() returns 1 on success (network address was successfully converted).  0 is returned if src does  not  contain  a  character
       string  representing  a  valid network address in the specified address family.  If af does not contain a valid address family, -1 is
       returned and errno is set to EAFNOSUPPORT.
当正确转换，返回1；src所转换的字符串，不对应指定家族协议格式时，返回0;当af指定的协议不在协议族中时，返回-1，并设置errno。

===============================
注意：
切记在给servaddr.sin_port变量赋值时，一定要关注好该变量的字节数，以便用对主机字节序转网络自节序函数，如若不然，转后后的字节序将发生位置错误，而导致无法赋值正确。
struct sockaddr_in servaddr;
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
servaddr.sin_port = htons(SERVERPROT);//一定要用htons返回值为short类型的函数，给表示端口的成员赋值。
/***************/
for (mod = mod * 8 - 1;mod >= 0;mod--)
	printf("%d", num & (1 << mod) ? 1 : 0);//获得比特位值的时，一定要用1位移之后，再与上所要获得比特位的的数值，即num & (1 << mod)，切记不要忘记取的是将1位移：num & mod。
/***************/
void bcopy(const void *src, void *dest, size_t n);
example:
bcopy(src, dest, strlen(src) + 1); //拷贝字符串时一定要取字符串的长度+1，以保证'\0'也能顺利的被拷贝进目的字符串
/***************/
inet_ntop系列函数中有三种变量：in_addr_t、struct in_addr和char *。
其中in_addr_t为结构体struct in_addr的成员，所以无论用到哪个函数，只要定义struct in_addr这样的一个结构体，就可在相应的参数位置上，按参数类型，填写定义的结构体变量名或是取结构体成员变量名就可。
typedef uint32_t in_addr_t;

struct in_addr {
	in_addr_t s_addr;
};
/***************/
三者定义：
int inet_aton(const char *cp, struct in_addr *inp);
in_addr_t inet_addr(const char *cp);
in_addr_t inet_network(const char *cp);
255.255.255.255最后的返回值与-1的值相等，无法分辨是255.255.255.255转换后的返回值，还是设置的错误值，所以，inet_addr、inet_network这两个函数不能处理255.255.255.255这个IP地址的返回结果，也请不要用这两个函数处理相应的IP。
inet_addr已经被废弃，请不要在用了，请用inet_aton。
三者区别：
inet_addr和inet_network函数都是用于将字符串形式转换为整数形式用的，两者区别很小，inet_addr返回的整数形式是网 络字节序，而inet_network返回的整数形式是主机字节序。（你一定会纳闷，为什么函数叫inet_network，却返回的是主机字节序，呵 呵，就是这么奇怪，你又有什么办法呢…）其他地方两者并无二异。他俩都有一个小缺陷，那就是当IP是255.255.255.255时，这两个“小子” （对这两个函数的昵称，请谅解…^_^）会认为这是个无效的IP地址，这是历史遗留问题，其实在目前大部分的路由器上，这个 255.255.255.255的IP都是有效的。
inet_aton函数和上面这俩小子的区别就是在于他认为255.255.255.255是有效的，他不会冤枉这个看似特殊的IP地址。
/***************/
int inet_pton(int af, const char *src, void *dst);
返回1,说明成功，返回0,按照af提供的格式，未能找到src对应的格式，返回-1,说明未能找到af对应的地址族。
/***************/
原型：
int socket(int domain, int type, int protocol);
tcp的设置，最后一个参数protocol可用宏IPPROTO_TCP或者设置数字0,请查看man 7 ip查看具体解释，或查找udp相关宏设置。
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
/***************/
unix网络编程86页提供了一个，可以获得系统环境变量设置listen监听最大值的编程方法
/***************/
exec系列函数，在错误时，返回-1并设置errno，如果正确，就不返回，直接执行子进程，执行子进程规则了，父进程继续执行。
exit()函数可直接从子函数当中将整个程序退出，也就是说，可以在子函数当中遇到错误情况，而使程序无法向下进行的时候，调用此函数，即可退出进程，而并不用回到主程序当中退出。
fork();wait()
wait(status)函数，通过WIFEXITED(status)宏函数取得子进程的结束状态，正常结束返回1,非正常返回0,通过WEXITSTATUS(status)宏函数取得子进程结束的返回值。
/***************/
vfor()子进程退出时，只能用exit函数退出，不能用正常的return函数退出，会出现执行错误！
/***************/
while((pid = waitpid(-1, &stat, WNOHANG)) > 0) {
    printf("child %d exit\n", pid);
}
/***************/
struct sockaddr转struct sockaddr_in结构体并取其中成员变量值的方法：
取结构体地址后进行指针地址类型转换后，按指向结构体指针取成员变量
((struct sockaddr_in*)&ss)->sin_addr
此方法在getsockname、getpeername函数中用到了，用通用的结构体，保存ipv4类型的结构体数据。
/***************/
在如上的并发服务器模型中，切记，服务器一定要在子进程中退出！
/***************/
^D标准输入的终止键组合，即标准输入下终止组合键<ctrl+D>表示的标准输入EOF
也是作为终端输入的exit快捷键命令
SIGKILL和SIGSTOP不能被捕获
socket传输数据的方法：
1.把所有的数值数据作为文本串传递，要求客户和服务器有相同的字符集。
2.显式定义所支持的数据类型的二进制格式（位数、大小端自序），并以这样的格式在客户和服务器之间传递所有数据，RPC软件包通常使用这种技术。
/***************/
每个线程只有一个errno。
/***************/
信号不会排队：信号只是一个进程拥有的结构体的相应的bit标志位
当用以下程序处理子进程结束时，会遇到这样的问题：当服务器和客户端均为并发时，可能因为许多字进程同时结束，发送多个终止信号，而只被记录一次
所以会导致回收僵死进程时，未被全部回收完毕
signal(SIGCHLD, &func_waitpid);
void func_waitpid(int signo) {
    pid_t pid;
    int stat;
    pid = wait(&stat);
    return;
}

正确处理函数应该是将wait函数换为waitpid函数，设置-1回收所有僵尸进程,设置WNOHANG当没有僵死子进程不阻塞，返回-1时证明没有僵死子进程了，程序退出。
while((pid = waitpid(-1, &stat, WNOHANG)) > 0);

linux下也有另一种让子进程结束，不让内核产生僵死子进程的做法：
signal(SIGCHLD, SIG_IGN);
在主进程中，用signal信号函数，设置SIGCHLD子进程信号为忽略SIG_IGN。注意，在其他如BSD等其他类型的unix系统中，不见得是这样的实现，比如BSD中设置忽略也是产生子进程的，也必须用wait回收子进程。
/***************/
wait()函数：
当有为结束的子进程，函数等待并阻塞，如果没有子进程运行，且没等到任何子进程，则返回-1，有则返回pid。
/***************/
int kill(pid_t pid, int sig);函数四种情况：
pid > 0;杀死为pid的进程
pid == 0;杀死组进程，无论是子进程中还是父进程中调用，均将全部父子进程一并杀死。
pid < 0;杀死进程绝对值为pid的进程组。
pid == -1;
与waitpid函数的四种情况类似
/***************/
poll函数用法
int poll(struct pollfd *fds, nfds_t nfds, int timeout);
一定要加括号啊：
 90                         if (!(fds[i].revents & POLLIN))
 91                                 continue;

(fds[i].revents & POLLIN) == 0 :0
fds[i].revents & POLLIN == 0 :0
fd 1 recv size 9 buf :fdsafkds

(fds[i].revents & POLLIN) == 0 :1
fds[i].revents & POLLIN == 0 :0
(fds[i].revents & POLLIN) == 0 :0
fds[i].revents & POLLIN == 0 :0
fd 2 recv size 12 buf :fdjsafjdksa

(fds[i].revents & POLLIN) == 0 :1
fds[i].revents & POLLIN == 0 :0
(fds[i].revents & POLLIN) == 0 :0
fds[i].revents & POLLIN == 0 :0
/***************/
epoll函数
ET模式读缓冲区的触发条件，接受缓冲区接收到数据的时候触发；而写缓冲区的条件是当缓冲区写满以后，才会被再次检查是否可写，当然了，写满缓冲区一定要返回，重新调用epoo_wait，就如读完缓冲区要返回一样，或是重新设置其触发条件，重新检测写属性，可立即返回写状态。
当设置触发条件时，假设设置条件为EPOLLIN | EPOLLOUT | EPOLLET，只当其中一个边缘模式被触发时，程序即返回，当一定要小心操作，因为这时候返回的事件不会告诉你，这个事件到底是哪个条件触发的，即不会表明是读条件满足还是写条件满足的时候触发，而检查可读可写性时，这些条件也全都会被等待函数返回，不管是设置了触发条件还是没设置，即假如只设置了EPOLLIN条件，那么写事件的状态也会被存放在事件的结构体当中，当然，这只是最基本可读可写，究竟是何种状态，根本就是未知的。
/***************/
设置服务器缓冲区大小一定要在listen之前设置，新连接的文件描述符的窗口大小，都是从listen继承而来的。对于客户端要在connect之前。
tcp套接字缓冲区大小至少是MSS的4倍，是依据tcp快速回复算法工作的机制得出的结论。
/***************/
setsockopt设置网络参数时序：
设置发送和接受缓冲区大小时，一定要在listen之前完成设置，因为所有描述符的属性，都是由原来来描述符继承而来的。
设置地址重用SO_REUSEADDR设置时，要在bind绑定之前设置其描述符属性。
通配地址就是没有更好的地址可以选择，就选择和这个匹配的地址。INADDR_ANY,以这个通配地址启动的服务器程序，要最后一个启动，如果还有其他明确指定了ip绑定的服务器的话，防止完全重复捆绑。
ip和端口均重复的捆绑，只限于udp协议。
/***************/
fcntl()
此函数当中的FD_CLOEXEC，设置在execp函数中，传进去的文件描述符参数是关闭的。
切记与open函数的O_CLOEXEC的宏选项不是一回事，复制这个选项的时候看准了不要复制错了，这两个宏在fcntl函数当中，均提到了，在open函数当中用了，是打开文件时候的设置的，而fcntl是对整个文件描述符存在期间进行的设置。
设置阻塞模式为直接操作宏F_GETFL，切记不是F_SETFD。
使用函数过程中，出现了偏差，当使用read函数和recv函数时，阻塞模式读取字符数量n在recv函数下返回了-1,并且errno被设置成了EAGAIN，而在read函数下则并未出现此效果，存疑以待日后研究。
还有设置阻塞模式时，一定要在listen函数以后进行设置，如果listen是要阻塞的话，因为如果不阻塞等待，listen不阻塞就错误的返回了，他的非阻塞可读条件是当网络有用户连接时，才成为可读。
/***************/
udp
upd服务器端想正确给每个客户端返回数据，就用recvfrom获得客户端的地址，然后再将获得的地址和端口结构体填写到发送函数当中去。
udp服务器大都是迭代服务器，tcp服务器大都是并发服务器。
服务器端，recvfrom的后两个参数 struct addr* 和 sock_len *相当于accapt的后两个参数，包括用法，都很类似。可以设置为空，不关注，len长度属于传入传出参数。
而在客户端sendto后两个参数struct addr* 和 sock_len，相当与connect函数的后两个参数，不能为空，必须填写去处，而且表示长度的参数均为传入参数。
当调用connect函数进行与远端进行连接的udp操作时netstat -apnu命令呈现这样的效果：
udp        0      0 127.0.0.1:47675         127.0.0.1:8000          ESTABLISHED 14176/client
而如果connect之前是这样的效果：
udp        0      0 0.0.0.0:54835           0.0.0.0:*                           14160/client
很显然，客户端程序在connect之后被分配了个固定的端口，而没分配之前是随机改变的。
没连接之前和连接之后的效果，在程序上的表现：
没connect之前：
getsockname函数：load host addr:0.0.0.0, port:39582
getpeername函数：peer host addr:255.127.0.0, port:63297	//请求的应该是个保留地址
进行connect之后：
getsockname函数：load host addr:127.0.0.1, port:44326
getpeername函数：peer host addr:127.0.0.1, port:8000
ip地址和端口都确定。

connect 可以改变连接端口，重新设置地址进行连接：
如果我们在程序中做如下的设置，让每次发送数据sleep一秒，前10次连接127.0.0.1，之后连接主机上的一个地址192.168.1.111，那么效果如下：
用netstat命令显示udp所有程序，加一级管道只让带我们程序名称的显示出来

前10次，connect127.0.0.1这个地址：
$ netstat -apun |grep -E "server|client"
（并非所有进程都能被检测到，所有非本用户的进程信息将不会显示，如果想看到所有信息，则必须切换到 root 用户）
udp        0      0 0.0.0.0:8000            0.0.0.0:*                           6730/server     
udp        0      0 127.0.0.1:42159         127.0.0.1:8000          ESTABLISHED 6746/client     
后10次connect重新连接192.168.1.111后：
udp        0      0 0.0.0.0:8000            0.0.0.0:*                           6730/server     
udp        0      0 127.0.0.1:42159         192.168.1.111:8000      ESTABLISHED 6746/client
 
tcp与udp描述端口的相关性：
当setsockopt设置tcp时，如果有相同目的地址ip和端口udp需要连接，那么不用设置reuseaddr选项，udp和tcp是独立的。
sento和recvfrom的协议相关性：
sendto和recvfrom函数是与协议无关的函数，即无论是tcp或udp的ipv4还是ipv6,都不影响这个正常的发送和操作。
/***************/
静态主机文件：/etc/hosts
例如：
$ cat /etc/hosts
127.0.0.1	localhost
127.0.1.1	zly-ThinkPad-Edge-E430
192.168.1.51    natu
192.168.1.52    sort
192.168.1.53    out2
192.168.1.19    gs

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
解析器配置文件：
$ cat /etc/resolv.conf 
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 127.0.1.1

主机服务名字和对应端口文件：
grep -e ^ftp -e ^domain /etc/services 
ftp-data	20/tcp
ftp		21/tcp
domain		53/tcp				# Domain Name Server
domain		53/udp
ftps-data	989/tcp				# FTP over SSL (data)
ftps		990/tcp
/***************/
gethostbyname以主机名字，取得主机信息的函数，比如通过www.hao123.com获得hostent结构体指针。
gethostbyaddr通过主机ip地址，获得主机的信息，如下架构体，与上边函数为一对，获得的结构体内容相同，只不过是通过另外的已知条件获得信息。
另外，gethostbyaddr函数，实验已经验证，填入本地ip地址好用，证明了程序没有问题，但远程主机地址无法获取信息，遇到高人问问。
**存疑
记得这两个函数返回时一定要进行深层拷贝，不要只用指针引用，以免发生重入问题。
           struct hostent {
               char  *h_name;            /* official name of host */
               char **h_aliases;         /* alias list */
               int    h_addrtype;        /* host address type */
               int    h_length;          /* length of address */
               char **h_addr_list;       /* list of addresses */
           }
/***************/
对端口的操作永远是使用htons或ntohs的16位数字操作。端口是16位的，要不会出错位的问题。
/***************/
网络信息操作函数详情：
信息	数据文件	结构	数值查找函数
主机	/etc/hosts	hostent	gethostbyaddr gethostbyaddr
网络	/ect/networks	netent	getnetbyaddr getnetbyname
协议	/etc/protocols	protoent getprotobyname getprotobynumber
服务	/etc/services	servnet	getservbyname getservbyport
/***************/
引用模型：
/* 输入下标刚好等于参数个数-1,先做前缀自减操作，只不过这样一来就改变了argc的参数值，而且操作是把输入的个数从后往前开始做操作的，斟酌再用 */
while(--argc > 0)
{
	fprintf(stdout, "argv[%d]:%s\n", argc, argv[argc]);
	/* 引用除a.out（argv[0]），之外的全部参数模型 */
}

或是用以下形式：
 13         j = 0;
 14         while (++j < argc)
 15         {
		fprintf(stdout, "argv[j]:%s\n", j, argv[j]);
 45         }
/***************/
int getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
        struct addrinfo {
                int              ai_flags;
                int              ai_family;
                int              ai_socktype;
                int              ai_protocol;
                size_t           ai_addrlen;
                struct sockaddr *ai_addr;
                char            *ai_canonname;
                struct addrinfo *ai_next;
        };
1.设置：hints->ai_flags |= AI_NUMERICHOST;对应域名设置必须为ip地址：node = "220.181.111.85"，防止任何类型地址到地址的映射;
可以用inet_pton函数检查输入字符串是ipv4还是ipv6格式：
inet_pton(AF_INET6, ipv4, &dest)和inet_pton(AF_INET, ipv6, &dest)时均会出错，正确时则能正确转换，这个技巧不但能用于区分ipv4和ipv6,也可用于对ipv4和ipv6字符串本身正确性的检查，如果格式错误，则返回。
/***************/
标准库文件读写，对于同一个文件，即需要读，也需要写，则分别打开两个文件指针，一个只读，一个只写。
/***************/
再次强调，传递文件描述符，是通过exec系列函数完成的，这样调用的方式必须是先执行的进程向后执行的可通过exec命令行调用的，并且能够接受参数为文件描述符的程序进行传递描述符，此外，fcntl函数可以禁止文件描述符在调用exec函数时有效。
/***************/
技巧：
想得知是打印出本可执行程序的名称，则直接引用argv[0]字符串。
/***************/
当用unix domain协议传递描述符时，接受方和发送方的描述符均不相互关联，发送和接收的描述符号码可能相同，也可能不同。均有自身程序的情况确定。
用户传递文件描述符或是凭证等类型，带辅助数据的数据类型时，一定接受和发送方相互约定好，且不要用普通的读写和函数前后调用，以免产生干扰。
/***************/
shutdown函数
当多个进程同时引用同一个文件描述符时，当其中有函数close那么，引用计数将递减，直至递减为0时，文件描述符才被真正的关闭；而当其中有进程调用shutdown时，那么此文件描述符无论引用计数的数量为多少，那么他的关闭他的读写半部都将生效，这是close和shutdown函数的明显区别。
/***************/
封装函数的时候，一定要记得不要重复系统已有函数名字，粘贴完系统函数的名字，一定要记得修改，不修改会造成不可预知的错误，现象很奇怪。
/***************/
广播地址接收，一定要绑定通用地址，如若不然，无法接受到消息；当用nc工具模拟客户端，察看其对绑定地址的状态变化，可以看印证。
/***************/
带外数据：
当带外数据发送多个字节时，只有最后一个字节会被当作带外数据内容，前N-1个字节，都会被当作普通数据传送。
设置带外数据，用信号进行处理是，一定要设置sigurg的信号属主，让内核知道信号发给哪个进程。
在linux下，当用select函数接受到带外数据可读，但数据没到时，读到一个字节为\0的一字节数据；而当signal函数处理时，当有带外数据到来的信号发送给进程，进程用带外数据方式去读时，则会返回描述为Resource temporarily unavailable、数字为11号、宏为EAGAIN的错误。
切记：当接受带外数据时，无论设置的缓冲区有多大，只要是recv设置MSG_OOB选项，那么函数，就只接受一个字节；类似的，当send函数发送几个字节，那么也只将，最后一个字节当作带外数据，其余都将作为普通数据发送。
做个案例分析，很经典：
send(fd, "1", sizeof("1"), MSG_OOB);
事实上以上函数是错误的，sizeof("1")为发送两个字节，即'1'和'\0'，那么带外数据就变成了'\0'，想发送的'1'，就变成了普通数据掺杂在普通数据里。
一定要指定sizeof("1") - 1为发送数据大小，千万不要误人子弟。
正确格式：send(fd, "1", sizeof("1") - 1, MSG_OOB);
/***************/
setsockopt时序：
用recvmsg函数获得upd连接接口地址时：在bind之后设置IP_PKTINFO为enable或是在socket之后都是可以的，这两种设置都能得到正确结果，这是在服务器上的设置。
在设置地址重用时的设置，SO_REUSEADDR，在socket之后，在bind之前设置，这样能保障在设置之前，允许地址重用生效。
/***************/
多线程
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
其中返回线程id的变量thread必须填写，否则将导致段错误。
再有线程一定要包含函数自身的头文件，如若不然，在32位系统上不会出问题，在64位系统上，当调用分离函数时，会发生段错误，包含头文件正常，不会有问题。
===============================
主进程多进程fork的形式，接受打开产生的网络套接字描述符，只要及时关闭，就能及时清理资源，并能接受新连接。即主程序接受新连接后，让子进程处理对应网络连接，而主进程关闭子进程已经连接的文件描述符。
事实上，listen函数文件描述符指定的总数，没有精确的定义。posix也未定义。
===============================
select中，如果select函数返回，那就用do-while循环前检测，返回肯定可读操作。加上合理的判断即可。
===============================
select 多路I/O复用模型
当select返回时，判断可读属性时，第一要判断是不是对端文件关闭，返回0值，再就是正好对端发正好是缓冲区大小，如果是用循环读取的，可能正好一次读完所有数据，下次在读数据而造成0数据无法返回，形成阻塞，解决这个问题有两个办法，一是，不循环读取数据，只在select返回时，读取一次，然后继续进行可读性检测设置，再就是利用非阻塞模式，读不到数据返回egain，做错误类型判断处理。
/* fd--ready descriptor, n--number of descriptor */
 12 int str_cli(int *fd, int n)
 13 {
 14         int ret;
 15         int i;
 16         char buf[1024];
 17         int m;
 18         int prev;
 19         int count;
 20         for (i = 0; i < n; i++)
 21                 fprintf(stdout, "fd[%d]:%d\n", i, fd[i]);
 22         bzero(buf, 1024);
 23         prev = 0;
 24         for ( ; ; )
 25         {
 26                 fd_set rset;
 27                 FD_ZERO(&rset);
 28                 for (i = 0; i < n; i++)
 29                         FD_SET(fd[i], &rset);
 30 
 31                 ret = select(fd[n - 1] + 1, &rset, NULL, NULL, NULL);
 32 
 33                 count = 0;
 34                 for (i = 0; i < n; i++)
 35                 {
 36                         if (FD_ISSET(fd[i], &rset))
 37                         {
 38                                 do
 39                                 {
 40                                         m = recv(fd[i], buf, 1024, 0);
 41                                         if (m < 0)
 42                                                 fprintf(stdout, "recv error:%s\n", strerror(errno));
 43                                         else if (m == 0)
 44                                                 fprintf(stdout, "peer pointer cloese\n");
 45                                         if (m >= 0 && prev > m)
 46                                                 bzero(buf + m, prev - m);
 47                                         if (m >= 0 && prev != m)
 48                                                 prev = m;
 49                                         fprintf(stdout, "fd:%d, buf:%s", fd[i], buf);
 50                                 }while(m == 1024);
 51                                 if (++count == ret)
 52                                         break;
 53                         }
 54                 }
 55         }
 56         return 0;
 57 }
===============================
STDIN_FILENO的可读状态的可读性：
实验过STDIN_FILENO，是不可检测可读属性的，设置之后，设置可读检测，但select对此宏不返回可读，无论是否向终端输入内容。倒是可以检测出可写属性。
===============================
nc工具使用：
nc -l -p 8000		/* 绑定本地主机8000端口 */
nc -nvv 127.0.0.1 8000	/* 连接127.0.0.1的8000端口，为tcp连接 */
注：无论nc工具是作为服务器还是客户端，其能力均为可收可发，亦即可以发送数据给对方，也可收到对方的数据，并且为I/O复用模式。切记，模拟服务器时，不是回射功能。
===============================
close之后文件描述符，仍保持了原来的值，还是赋值为-1为好。
===============================
listen返回的文件描述符，其状态是否可读，表示的是否有新用户连接，如果有新用户连接，则有读取内容，反之则没有，亦即，不可读则是没有新用户连接。
如果有select函数检查有新用户连接，则调用accpet函数进行连接新用户。
用数字保存连接的返回值时，最大有效描述符数量由accept新建连接决定，最小数量由关闭文件描述符决定，所以，最大描述符一定要检查这两处变化。
===============================
socket、bind、listen、accpet，用select函数连接时的返回情况：
socket和bind建立之初就即为可读，即可进行后续操作，listen当用户连接时才有数据可读，才返回；accept建立的是连接描述符，只有当有用户写数据时才可读。
设置
===============================
缩写：
PDU protocol data unit协议传输单元，各层实体数据交换的单位信息
SDU service data unit数据服务单元，下层传递
SA struct sockaddr
MSS maximum segment size最大分节大小（对端通告的）
应用层（tcp）与传输层之间的借口属性
MTU maximum transmission unit外出接口最大传输单元
网络层与链路层之间的接口属性
internet protocol 网际协议
TCP transmission control protocol 传输控制协议
UDP user datagram protocol 用户数据报协议
LAN local area network 城域网
WAN wide area network 广域网
POSIX 与 API
HTTP Hyperte transfer protocol超文本传输协议
SMTP Simple mail transfer protocol简单文本传输协议
PRC remote procedure call远程过程调用
DNS domain name system域名系统
listening descriptor 监听描述符
connected descriptor 连接描述符
tree-way handshake 三次握手
ISO international organization for standardization 国际标准化组织
OSI open system interconnection 计算机通信开放系统互联
raw socket 原始套接字
user process 用户进程
CSRG computer system research group 计算机系统研究组
AT&T American Telephone & Telegraph Company 美国电话电报公司
berkeley-derived implementation 源自berkeley的实现
VPN virtual private network 虚拟专用网络
SSH secure shell 安全shell
lo:loopback 环回
POSIX: Portable Operating System Interface 可移植操作系统接口
IEEE Institute of Electrical and Electronics Engineers 电气和电子工程师协会
austin CSRG:the austin common standards revision group austin公共标准修订组
IEC: internation electrotechnical commission 国际电工委员会
API:system application program interface 系统应用程序接口
PII:protocol-independent interfaces
DNI:detailed network interfaces详尽网络接口
open group 开放团体
OSF open software foundation 开放软件基金会
XPG X/Open portability guide X/Open移植性指南
x/open single unix specification X/Open单一Unix规范
CDE common desktop environment 公共桌面环境
XNS xerox network system
IETF internet Engineering Task Force 因特网工程任务攻坚组
SCTP Stream Control Transmission Protocol 流控制传输协议
DLPI datalink provider interface 数据链路提供接口
ICMP Internet Control Message Protocol 网际控制消息协议
IGMP Internet Group Management Protocol 网际组管理协议
ARP Address Resolution Protocol 地址解析协议
RARP Reverse Address Resolution Protocol 反向地址解析协议，用于无盘节点引导
RFC Request for Comments 请求评注
RTT round-trip time ：tcp动态估算客户端与服务器之间的往返时间
flow control 流量控制
advertised window 通知窗口
full-duplex 全双工
long fat pipe 长胖管道
active close 主动关闭
passive close 被动关闭
EOF end-of-file 文件结束符
half-close 半关闭
state transition diagram 状态转换图
simultaneous open 同时打开
simultaneous close 同时关闭
little-endian 小端
big-endian 大端
MSB most significant bit 最高有效位
LSB least significant bit 最低有效位
host byte order 主机字节序
network byte order 网络字节序
htonl系列函数中，h：host，n：net，l：表示32位，s：表示16位
octet 八位组
inet_pton中p代表表达presentation，n代表数值numeric
named pipe 有名管道
first in first out 先进先出
hard error 硬错误，服务器上没有对应端口的进程运行
defensive programming 防御性编程
destination unreachable 目的地址不可达
soft error 软错误
bound 绑定，表示捆绑成功后的状态
arriving 到达，主机以外为视角
received 接收，主机以内为视角
incoming 和 inbound 外来
outgoing 或 outbound 外出
sending 或 sent 发送
fudge factor 模糊因子
WWW World Wide Web 万维网
hacker 黑客
IP spoofing ：ip欺骗
denial of service 服务被拒绝
calling process 调用进程 exec进程映像替换成的新子程序
new program 新程序，新执行的程序为新程序
itarative server 迭代服务器
dispositon 处理
action 行为
signal handler 信号处理函数
catching 捕获
core image 核心影响，也就是内存影像
delivering 递交
zombie 僵死
slow system call 慢系统调用
software caused connection abort 软件引起的连接中断
streams subsystem 流子系统
server terminated prematurely 服务器过早终止
connection reset by peer 对方复位连接错误
FAQ：frequently asked question 经常问及的问题
core dumping 内存内容倾泻
XDR：External Data Representation 外部数据表示（标准）
weak end system model 弱端系统模型
generation 产生
delivery 递送
pending 未决
signal mask 信号屏蔽字
multiplexing 复用
poll device 轮询设备
blocking I/O 阻塞I/O
signal-driven I/O 信号驱动I/O
asynchronous I/O 异步I/O
synchronous I/O 同步I/O
Receive Low Water Mar 接收低水位标记
denial of service 拒绝服务（型的攻击）
normal 普通
priority band 优先级带
high priority 高优先级
indeterminate 不确定
LT :level-triggered 水平触发，也被称为条件触发
ET :edge-triggered 边缘触发
keep-alive probe 保持存活探测分节
make-dead 切断
heartbeat 心搏（机制）
CRLF carriage return/line feed 回车换行
weak end system model 弱端系统模型
strong end system model 强端系统模型
dropped due to full socket buffers 因套接字缓冲区满而丢弃
DNS domain name system 域名系统
simple name 简单名字 如：solaris或bsdi
FQDN Fully Qualified Domain Name 全限定的域名 如solaris.unpbook.com
FQDN 也称 absolute name 绝对名字
RR resource record 资源记录
RTR pointer record 指针记录 把ip映射成主机名
MX mail exchanger 邮件交换器
CNAME canonical name 规范名字 例如www和ftp等
A：A记录将主机名映射为32位的IPv4地址；
AAAA：“四A”记录将主机名映射为128位的IPv6地址；
PTR：PTR记录（称为“指针记录”）将IP地址映射为主机名；
BIND Berkeley Internet Name Domain
resolver 解析器
link-editing 链编
NIS Network Infomation System 网络信息系统
LDAP Lightweight Dirctory Access Protocol 轻权目录访问协议
IRS infomation Retrival Sevice 信息检索服务
official host正式主机名，相对于别名alias
DNS 域名系统
NFS 网络文件系统
SNMP 简单网络管理协议
shallow copy 浅层拷贝，即复制地址
deep copy 深层拷贝，即复制内容
re-entrant 可重入的
dual stacks 双栈
facility 设施
log message 日志消息
scatter read 分散读
gather write 集中写
control information 控制信息，也就是辅助数据
ancillary data object 辅助数据对象
event filter 时间过滤器
user credential 用户凭证
sort count 不足计数
broadcasting 广播
multicasting 多播
unicasting 单播
anycasting 任播
resource discovery 资源发现
DHCP dynamic resolution protocol 地址解析协议
NTP network time protocol 网络时间协议
taking no stand 未作规定
race condition 竞争状态
nonlocal goto 非局部跳转
group address 组地址
universally administered 统一管理
all-hosts 所有主机
all-routes 所有路由器
link local 链路局部
locally administered 局部管理
transient 临时
scope 范围
all-nodes 所有节点
hop limit 跳限
interface-local 接口局部的
link-local 链路局部的
admin-local 管区局部的
site-local 网点局部的
organization-local 组织机构局部的
global 全球或全局的
joining 加入
imperfect filtering 不完备过滤
multicast routing protocol 多播路由协议
SSM source-specific multicast 源特定多播
anti-spoofing 反窃听
SPT server processing time 服务器处理时间
exponential backoff 指数回退
retransmission ambiguty problem 重传二义性问题
expendited data 经加速数据
urgent mode 紧急模式
lightweight proccess 轻权进程
=======
joinable 可汇合的
detached 脱离的
concurrent programming 并发编程
parallel programming 并行编程
mutual exclusion 互斥锁
critical region 临界区
persistent connection 持续连接
wait channel 等待通道
thundering herd 惊群
collision 冲突
===============================
翻译：
segment 分节
message 消息
application data 应用数据
program 程序
process 进程
chunk 块
datagram 数据报
fragmentation 分片
frame 帧，数据链路层上传输
fragmant 片段
reassembly 重组
tcp/ip协议进行的分片操作
packet 分组，俗称包
wrapper function 包裹函数
encapsulating 封装
connectionless 缺少连接的
sequencing 排序
assocition 关联
message-oriented 面向消息
passive open 被动打开
active open 主动打开
MSL maximum segment lifetime 最长分节生命期RFC建议两分钟。berkeley的实现传统上改用30秒的值
hop limit 跳限，即ping命令上ttl显示的数字，最大值是255的8位字段
host duplicate 迷途的重复分组
wandering duplicate 漫游的重复分组
incanrnation 化身 重新建立相同的服务器和客户端进程，后一个称为前一个的化身
port number 端口号
well-known port 众所周知的端口号（0-1023）
TFTP trivial file transfer protocol 简化文件传输协议
ephemeral port 临时端口，客户端使用，这些端口号通常由传输层协议自动赋值与客户。只要保证，端口好在客户端主机中唯一即可，传输协议的代码确保这种唯一性
IANA internet Assigned Numbers Authority 因特网已分配数值权威机构
registered port 已登记的端口（1024-49151）不受IANA控制，不过由IANA登记并提供他们的使用情况清单
动态端口dynamic port 或 private port私用端口（49152-65535） IANA不管这些端口
reserved port 保留端口，分配给众所周知的服务使用，必须以超级用户的特权启动
socket pair 套接字对，是一个定义该链接的两个端的四元组：本地IP、本地tcp端口号、外地IP、外地tcp端口，而sctp使用的多宿ip不同，但端口相同
套接字：标识每个端点的两个值：ip地址和端口号，通常称为一个套接字
listening socket 监听套接字
wirlcard 通配符
connected socket已连接套接字
jumbo payload 特大净负荷，为没有限制mtu的主机到主机的内部连接而设计的，可以将最大净负荷从16位表示长度扩大到32位，比如HIPPI
path MTU 路径MTU
packet too big 分组太大
DF don't fragment 不分片 IPv6协议当中的标志位，不允许转发他们的路由器分片
destination unreachable，fragmentation needed but DF bit set
目的地不可达，需分片但DF已设置，当大于IPv6路由器分片时，就会产生这样一个ICMPv6报文
minimum reasseembly buffer size 最小重组缓冲区大小，IPv4=576，IPv6=1500
MSS 经常设置成MTU减去IP和TCP首部的固定长度。在以太网中使用IPv4的MSS值为1460，使用IPv6的MSS值为1440，两者tcp的首部均为20字节，但IPv4首部是20字节，IPv6首部是40字节。
SO_SNDBUF设置tcp、UDP和SCTP缓冲区大小
服务名称及其端口：
echo 回射 7
discard 丢弃 9
daytime 时间获取 13 返回可读的时间和日期
chargen 字符生成 19
time 流逝时间获取 37 从1900年1月1日（UTC时间）以来的秒数
ANSI：American National Standards Institute 美国国家标准学会
casting 强制转换
passing arg 2 of bind from incompatible pointer type
把不兼容的指针类型传递给bind函数的第二个参数
scoped address 地址范围
scope 范围
link-local address 链路局部地址
interface index 接口索引
value-result argment 值-结果参数
STREAMS message 流消息
fork 派生
socket descriptor 套接字描述符
application-level acknowledge 应用及确认
bandwidth-delay product 宽带-延迟积
long fat pipe 长管道
inactivity timer 休止状态定时器
absolute timer 绝对定时器
completely duplicate binding 完全重复的捆绑
internetwork control 网间控制
network control 网内控制
ancillary data 辅助数据
pseudoheader 伪首部
outstanding data 待确认数据，直译为未决数据
delayed ACK algorithm ACK延滞算法
adaption layer indication 适配层指示
partial reliability 可靠性
TSN transport sequence number 传输序号
communication up 通信开始
unconfirmed address 未证实地址
retransmission timeout 重传超时
maximum burst size 最大猝发大小
current flight size 当前飞行大小
maximum fragment size 最大片段大小
in flight 在飞行中

===============================
规则：
只要一个unix函数中发生了错误，全局变量errno就被设置一个指明该错误的正值，函数本身则通常返回-1
1460的MSS，以太网上ipv4的典型值
piggybacking 捎带：确认伴随应答发送，通常在服务器处理请求并产生应答的时间少于200ms时发生；如果服务器耗时更长时间，譬如1s，那么我们将看到先是确认后是应答。
相同的端口分配tcp和udp的同一服务器使用，例如tcp80和udp80都分给了web，尽管目前所有的服务器都用了单纯的tcp实现
IPv4协议记录长度的16位记录的是ip数据段的总长度，而IPv6则变为了协议除头部以外携带的数据段的净负荷长度，而表示长度的两个版本中都是16位，所以在IPv4中数据的总长度是2^16=65535，而在IPv6中则是2^16+40(ip头长度）=65535+40=65575
以太网最大MTU为1500字节
IPv4最小MTU68字节
===============================
函数对比：
snprintf能检查缓冲区大小，sprintf则不能
gets、strcat和strcpy，最好是用fgets、strncat和strncpy
更好的代替是strlcat和strlcpy
存疑：
没明白在socket中使用套接字地址结构的长度只有几百个字节，不必要用size_t
见unix网络编程第一卷25页，没读懂部分
size_t在32位系统上是32位，在64位系统上是64位
socklen_t使用之前必须包含头文件：即包含使用socket函数时的头文件
#include <sys/types.h>          /* See NOTES */
#include <sys/socket.h>

===============================
专业术语：
防弹
回射
===============================
掌握的网络软件：
netstat、ifconfig
netstat -in
Kernel Interface table
查看设备借口名字及其统计信息


netstat -rn
kerner interface table
内核 IP 路由表
默认路由表ip地址

MULTICAST 支持组播
===============================
读就绪：就是这个文件描述符的接收缓冲区中的数据字节数大于等于套接字接收缓冲区低水位标记的当前大小；
写就绪：该描述符发送缓冲区的可用空间字节数大于等于描述符发送缓冲区低水位标记的当前大小。（如果是socketfd，说明上一个数据已经发送完成）
接收低水位标记和发送低水位标记：由应用程序指定，比如应用程序指定接收低水位为64个字节，那么接收缓冲区有64个字节，才算fd读就绪。
===============================
接收低水位标记(Receive Low Water Mark)，是接收缓冲区的一个限制标记，当接收缓冲区中的数据字节数达到此限制时，读操作可以返回数据（数据已准备好）。
    SO_RCVLOWAT选项可以用setsockopt(2)函数进行修改，缺省值为1（1个字节就可以读，亦即接收缓冲区中收到一个字节时select（）即可返回）。
    发送缓冲区类似，不过指的是发送缓冲区的字节空位数。
===============================
       int pselect(int nfds, fd_set *readfds, fd_set *writefds,
                   fd_set *exceptfds, const struct timespec *timeout,
                   const sigset_t *sigmask);
此函数，sigmask选项设置要阻塞信号集，实验已经得到结论，如果产生信号，那么在此函数运行期间不作用任何效果，直到函数返回，屏蔽结束只有再由程序继续处理信号。现象就是，在将listen设置后的socket套接字加入可都文件描述符集当中，等待调用pselect的函数返回，当没有客户端连接，即当pselect不返回时，则信号对其不产生作用，而当客户端连接后，则立即提示服务器已关闭，而服务器这时候已经被杀死退出，此程序没做信号捕捉处理，执行了默认的信号处理过程。
现象过程如下：
服务器未连接时的pselect表现，阻塞在pselect函数，对信号sigint信号进行了阻塞：
若干信号阻塞之后，取消阻塞之后，马上对进程产生了作用
$ ./a.out 
before pselect
^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C^C
当客户端进行连接之后，瞬间表现：
很显然，服务器直接退出了
$ nc -nvv 127.0.0.1 8000
nc: connect to 127.0.0.1 port 8000 (tcp) failed: Connection reset by peer

以下是正常连接并断开，有客户端先关闭连接的过程：
服务器：
$ ./a.out 
before pselect
after pselect
check avalable connfd:4
received buf :fda

peer close		/* 此处服务器做了读取为0时的客户端状态判断处理的消息打印 */
客户端：
$ nc -nvv 127.0.0.1 8000
Connection to 127.0.0.1 8000 port [tcp/*] succeeded!
fda
fda
^C
===============================
注意：for循环当中，如果用break语句结束循环，最后的计数器i++是不执行的；
如果用continue是执行的。

===============================
volume 2 (卷二)

IPC 进程间通信 interprocess communication
RPC remote procedure call 远程过程调用
ISO 国际标准化组织
IEC 国际电工委员会
API system application program interface
OSF 开放软件基金会
CDE common Desktop Enviroment 公共桌面环境
CR/LF 回车加换行 双字符序列

messge passing 消息传递
synchronization 同步
named pipe 有名管道
messge queue 消息队列
related 亲缘关系
recode locking 记录上锁
semaphore 信号量
share memory 共享内存
mutex 互斥锁
condition variable 条件变量
read-write lock 读写锁
persistence 持续性
process-persistence 随进程持续的
kernel-persistence 随内核持续的
filesystem-persistence 随文件系统持续的
identifier 标识符
name space 名字空间
wrapper function 包裹函数
rationale and notes 原理与注释
unix 95 : spec 1170 -- 系统接口数926个，头文件70个，命令174个
X/Open Single unix specification X/Open 单一unix规范
unix 98 接口1434 个
a standard way of being nonstandard 造成不标准的标准方式
file mode creation mask 文件模式创建掩码 
first in, first out 先进先出
named pipe 有名管道
interative server 迭代服务器
concurrent server 并发服务器
one-child-per-client 每个客户一个子进程
byte stream 字节流
pathname variable 路径名变量
polling 轮询
asynchonous event notification 异步事件通知 
async-signal-safe 异步信号安全
